"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _window = _interopRequireDefault(require("global/window"));

var _document = _interopRequireDefault(require("global/document"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function parseUnit() {
  var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  // remove the s on plural time units e.g. minute-s
  var timeUnit = unit.replace('s', '');
  var time = {
    minute: function minute() {
      return 60 * 1000;
    },
    hour: function hour() {
      return 60 * time.minute();
    },
    day: function day() {
      return 24 * time.hour();
    },
    week: function week() {
      return 7 * time.day();
    },
    month: function month() {
      return 30 * time.day();
    },
    year: function year() {
      return 365 * time.day();
    }
  };

  switch (timeUnit) {
    case 'year':
    case 'month':
    case 'week':
    case 'day':
    case 'hour':
      return time[timeUnit]();

    case 'minute':
    default:
      return time.minute();
  }
}

function parseExpireDate() {
  var expires = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '1 minute';
  var byWords = expires.split(' ');

  var _byWords = _slicedToArray(byWords, 2),
      times = _byWords[0],
      unit = _byWords[1];

  var duration = times * parseUnit(unit);
  var date = new Date();
  date.setTime(date.getTime() + duration);
  return date.toUTCString();
}

var cookieJar = {
  setItem: function setItem(key) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        expires = _ref.expires,
        _ref$domain = _ref.domain,
        domain = _ref$domain === void 0 ? _window.default.location.hostname : _ref$domain,
        _ref$path = _ref.path,
        path = _ref$path === void 0 ? '/' : _ref$path;

    var expireDate = parseExpireDate(expires);
    var parsedValue = typeof value !== 'string' ? JSON.stringify(value) : value;
    var cookie = "".concat(key, "=").concat(parsedValue, ";expires=").concat(expireDate, ";domain=").concat(domain, ";path=").concat(path);
    _document.default.cookie = cookie;
  },
  getItem: function getItem(key) {
    var cookies = _document.default.cookie.split(';');

    var cookiesObj = cookies.reduce(function (acc, item) {
      var _item$split = item.split('='),
          _item$split2 = _slicedToArray(_item$split, 2),
          cookieName = _item$split2[0],
          value = _item$split2[1];

      return _objectSpread({}, acc, _defineProperty({}, cookieName.trim(), value));
    }, {});

    try {
      return JSON.parse(cookiesObj[key]);
    } catch (e) {
      return cookiesObj[key];
    }
  },
  removeItem: function removeItem(key) {
    _document.default.cookie = "".concat(key, "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;");
  },
  clear: function clear() {
    var cookies = _document.default.cookie.split(';');

    cookies.forEach(function (cookie) {
      var _cookie = _slicedToArray(cookie, 1),
          cookieName = _cookie[0];

      cookieJar.removeItem(cookieName.trim());
    });
  },
  key: function key() {
    console.log('key() method is not available for cookies');
  }
};
var _default = cookieJar;
exports.default = _default;